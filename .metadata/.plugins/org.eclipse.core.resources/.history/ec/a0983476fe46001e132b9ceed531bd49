package in.gis;

import static org.hamcrest.CoreMatchers.any;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;

import in.gis.binding.Course;
import in.gis.rest.CourseRestController;
import in.gis.service.CourseService;

@RunWith(SpringRunner.class)
@WebMvcTest(CourseRestController.class) // represents which target class we want to test
public class CourseRestControllerTest {

	/*
	 * 
	 * @MockBean//instead comm real object we can comm alternae object private
	 * CourseService courseService;
	 * 
	 * 
	 */
	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private CourseService courseService;

	@Test
	public void testCreateCourse() throws Exception {
		// Create a new Course object
		Course course = new Course(1, "Java", 99.9);
		ObjectMapper mapper = new ObjectMapper();
		String writeValueAsString = mapper.writeValueAsString(course);
		MockHttpServletRequestBuilder content2 = MockMvcRequestBuilders.post("/course")
				.contentType(MediaType.APPLICATION_JSON).content(writeValueAsString);
		ResultActions perform = mockMvc.perform(content2);
		MvcResult andReturn = perform.andReturn();
		MockHttpServletResponse response = andReturn.getResponse();
		int status2 = response.getStatus();
		assertEquals(201, status2);
		// Mock the upsert method of the service
		when(courseService.upsert((Course) any(Course.class))).thenReturn("Course created successfully");

		/*
		 * // Perform the POST request mockMvc.perform(post("/course")
		 * .contentType(MediaType.APPLICATION_JSON_VALUE)
		 * .content(asJsonString(course))) .andExpect(status().isCreated())
		 * .andExpect(content().string("Course created successfully"));
		 */

	}

	// Other test methods

	/*
	 * String asJsonString(final Object obj) { try { return new
	 * ObjectMapper().writeValueAsString(obj); } catch (Exception e) { throw new
	 * RuntimeException(e); } }
	 */
}
