package com.gis.test;

import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.gis.entity.EmpEntity;
import com.gis.restcontroller.EmpController;
import com.gis.service.EmpService;

@WebMvcTest(EmpController.class)
public class EmpControllerTest {

		@Autowired
		private MockMvc mockMvc;
		@MockBean
		private EmpService empService;

	    @Test
	    public void testSaveEmpSuccess() throws Exception {
	        EmpEntity empEntity = new EmpEntity();
	        Mockito.when(empService.saveEmp(empEntity)).thenReturn(true);

	        mockMvc.perform(MockMvcRequestBuilders.post("/saveEmp")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("{}")) // You can add the JSON content here
	                .andExpect(MockMvcResultMatchers.status().isCreated())
	                .andExpect(MockMvcResultMatchers.content().string("Record inserted successfully"));
	    }

	    @Test
	    public void testSaveEmpFailure() throws Exception {
	        EmpEntity empEntity = new EmpEntity();
	        Mockito.when(empService.saveEmp(empEntity)).thenReturn(false);

	        mockMvc.perform(MockMvcRequestBuilders.post("/saveEmp")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("{}")) // You can add the JSON content here
	                .andExpect(MockMvcResultMatchers.status().isBadRequest())
	                .andExpect(MockMvcResultMatchers.content().string("Record not inserted"));
	    }

	    @Test
	    public void testUpdateEmp_Success() throws Exception {
	        EmpEntity empDto = new EmpEntity();
	        when(empService.updateEmp(empDto)).thenReturn(true);

	        mockMvc.perform(MockMvcRequestBuilders.put("/updateEmp")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("{}")) // You can add the JSON content here
	                .andExpect(MockMvcResultMatchers.status().isOk())
	                .andExpect(MockMvcResultMatchers.content().string("Record updated successfully"));
	    }

	    @Test
	    public void testUpdateEmp_Failure() throws Exception {
	        EmpEntity empDto = new EmpEntity();
	        when(empService.updateEmp(empDto)).thenReturn(false);

	        mockMvc.perform(MockMvcRequestBuilders.put("/updateEmp")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("{}")) // You can add the JSON content here
	                .andExpect(MockMvcResultMatchers.status().isBadRequest())
	                .andExpect(MockMvcResultMatchers.content().string("Record not updated"));
	    }

	    @Test
	    public void testUpdateEmpSuccess() throws Exception {
	        EmpEntity empDto = new EmpEntity();
	        when(empService.updateEmp(empDto)).thenReturn(true);

	        mockMvc.perform(MockMvcRequestBuilders.put("/updateEmp")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("{}")) // You can add the JSON content here
	                .andExpect(MockMvcResultMatchers.status().isOk())
	                .andExpect(MockMvcResultMatchers.content().string("Record updated successfully"));
	    }

	    @Test
	    public void testUpdateEmpFailure() throws Exception {
	        EmpEntity empDto = new EmpEntity();
	        when(empService.updateEmp(empDto)).thenReturn(false);

	        mockMvc.perform(MockMvcRequestBuilders.put("/updateEmp")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content("{}")) // You can add the JSON content here
	                .andExpect(MockMvcResultMatchers.status().isBadRequest())
	                .andExpect(MockMvcResultMatchers.content().string("Record not updated"));
	    }

	
   }

